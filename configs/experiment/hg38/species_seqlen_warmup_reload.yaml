# @package _global_
defaults:
  - /pipeline: species
  - override /scheduler: cosine_warmup_timm

model:
  _name_: dna_embedding
  d_model: 128
  n_layer: 2
  d_inner: ${eval:4 * ${.d_model}}
  vocab_size: 12
  resid_dropout: 0.0
  embed_dropout: 0.1
  # attn_layer_idx: [0, 1]  # if passing these attn flags, then MHA auto used
  # attn_cfg:
  #   num_heads: 1
  #   use_flash_attn: True  # figure out how to use
  #   fused_bias_fc: True
  #   dropout: 0.1
  fused_mlp: False # figure out how to use fused MLP, maybe only with bf16 + a100
  fused_dropout_add_ln: False
  # checkpoint_mixer: True # mem reduction
  # checkpoint_mlp: True # mem reduction
  pad_vocab_size_multiple: 8
  residual_in_fp32: True
  layer:
    _name_: hyena
    emb_dim: 5
    filter_order: 64
    short_filter_order: 3
    l_max: 1026
    modulate: True
    w: 10
    lr: ${optimizer.lr}
    wd: 0.0
    lr_pos_emb: 0.0

trainer:
  accelerator: gpu
  devices: 1
  num_nodes: 1
  accumulate_grad_batches: ${div_up:${train.global_batch_size}, ${eval:${trainer.devices} * ${dataset.batch_size} * ${trainer.num_nodes}}}
  max_epochs: 100
  precision: 16  # bf16 only a100
  gradient_clip_val: 1.0
  # strategy: null

scheduler:
  t_in_epochs: False
  t_initial: ${eval:${div_up:${dataset.__train_len}, ${train.global_batch_size}} * ${trainer.max_epochs}}
  warmup_lr_init: 1e-6
  warmup_t: ${eval:${div_up:${dataset.__train_len}, ${train.global_batch_size}} * ${trainer.max_epochs} * 0.01}
  lr_min: ${eval:0.1 * ${optimizer.lr}}

optimizer:
  lr: 6e-5
  weight_decay: 0.1

train:
  gpu_mem: ${eval:"round(float(__import__('subprocess').check_output('nvidia-smi -i 0 --query-gpu=memory.total --format=csv,noheader,nounits', shell=True).strip().decode()) / 1000)"}
  seed: 2222
  # use 256 < 64k seqs, use 128 > 64k seqs
  # adjust `lr` to keep 8:1 ratio between global_batch_size:lr
  global_batch_size: 256 # set to a fixed amount for comparison between runs with diff batch_size's to fit onto GPU
  remove_test_loader_in_eval: True  # there is a unique validation / test set in this benchmark
  pretrained_model_strict_load: False  # false allows encoder/decoder to be used if new model uses it
  # for loading backbone and not head, requires both of these flags below
  # From scratch
  # pretrained_model_path: null
  # pretrained_model_state_hook: null
  # # Pretrained
  pretrained_model_path: /local-scratch/nigam/projects/mwornow/projects/safari-internal/outputs/2023-04-14/8_256_160.ckpt
  pretrained_model_state_hook:
    _name_: load_backbone
    freeze_backbone: false  # seems to work much better if false (ie finetune entire model)

callbacks:
  seqlen_warmup_reload:
    # epochs refers to how long to run at that stage (not cummulative!)
    stage_params:   
      - epochs: 1
        seq_len: 1024
        batch_size: 128
      - epochs: 1 
        seq_len: 2048
        batch_size: 64
      - epochs: 1
        seq_len: 4096
        batch_size: 32
      - epochs: 1
        seq_len: 8192  
        batch_size: 16
      - epochs: 1 
        seq_len: 16_384 
        batch_size: 8
      - epochs: 1
        seq_len: 32_768
        batch_size: 4
      - epochs: 1
        seq_len: 65_536
        batch_size: 2
      - epochs: 1
        seq_len: 131_072
        batch_size: 2
      - epochs: 1
        seq_len: 190_000
        batch_size: 2 
      - epochs: 1
        seq_len: 250_000
        batch_size: 1
      # - epochs: 2
      #   seq_len: 1024
      #   batch_size: 128
      # - epochs: 2 
      #   seq_len: 2048
      #   batch_size: 64
      # - epochs: 2
      #   seq_len: 4096
      #   batch_size: 32
      # - epochs: 2
      #   seq_len: 8192  
      #   batch_size: 16
      # - epochs: 2 
      #   seq_len: 16_384 
      #   batch_size: 8
      # - epochs: 4
      #   seq_len: 32_768
      #   batch_size: 4
      # - epochs: 4
      #   seq_len: 65_536
      #   batch_size: 2
      # - epochs: 4
      #   seq_len: 131_072
      #   batch_size: 2
      # - epochs: 4
      #   seq_len: 190_000
      #   batch_size: 2
      # - epochs: 1
      #   seq_len: 250_000
      #   batch_size: 1