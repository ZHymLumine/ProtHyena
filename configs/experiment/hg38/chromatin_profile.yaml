# @package _global_
defaults:
  - /pipeline: chromatin_profile
  - override /scheduler: cosine_warmup_timm

model:
  _name_: dna_embedding
  d_model: 128
  n_layer: 2
  d_inner: ${eval:4 * ${.d_model}}
  vocab_size: 12
  resid_dropout: 0.0
  embed_dropout: 0.1
  fused_mlp: False # figure out how to use fused MLP, maybe only with bf16 + a100
  fused_dropout_add_ln: True
  residual_in_fp32: True
  pad_vocab_size_multiple: 8
  layer:
    _name_: hyena
    emb_dim: 5
    filter_order: 64
    short_filter_order: 3
    l_max: 1026  # required to be set the same as the pretrained model if using, don't forget the +2!  ${eval:${dataset.max_length}+2}
    modulate: True
    w: 10
    lr: ${optimizer.lr}
    wd: 0.0
    lr_pos_emb: 0.0

task:
  # 2 options for soft_cross_entropy (for mixup)
  loss:
    # soft_cross_entropy for pytorch 1.10+, which takes in label_smoothing here
    _name_: binary_cross_entropy
    # label_smoothing: 0.1
  # pass in list of k's
  # last_k_ppl: null
  torchmetrics: null  # torchmetrics for this task don't work currently

trainer:
  accelerator: gpu
  devices: 1
  num_nodes: 1
  accumulate_grad_batches: ${div_up:${train.global_batch_size}, ${eval:${trainer.devices} * ${dataset.batch_size} * ${trainer.num_nodes}}}
  max_epochs: 100
  precision: 16  # bf16 only a100
  gradient_clip_val: 1.0
  # strategy: null

dataset:
  batch_size: 1000
  max_length: 1024 #Â DeepSea uses 1000, BigBird uses 8000
  tokenizer_name: char
  train_len: 2200000 # 2188805 for filtered hg38 / 2200000 for hg19
  rc_aug: false  # reverse complement augmentation

scheduler:
  t_in_epochs: False
  t_initial: ${eval:${div_up:${dataset.train_len}, ${train.global_batch_size}} * ${trainer.max_epochs}}
  warmup_lr_init: 1e-6
  warmup_t: ${eval:${div_up:${dataset.train_len}, ${train.global_batch_size}} * ${trainer.max_epochs} * 0.01}
  lr_min: ${eval:0.1 * ${optimizer.lr}}

optimizer:
  lr: 6e-4
  weight_decay: 0.1

train:
  gpu_mem: ${eval:"round(float(__import__('subprocess').check_output('nvidia-smi -i 0 --query-gpu=memory.total --format=csv,noheader,nounits', shell=True).strip().decode()) / 1000)"}
  seed: 2222
  global_batch_size: ${dataset.batch_size}
  remove_test_loader_in_eval: False
  pretrained_model_strict_load: False # false allows encoder/decoder to be used if new model uses it
  # for loading backbone and not head, requires both of these flags below
  #pretrained_model_path: /home/callum/private/hyena/safari-internal-inf/layer2_seq1024/loss.ckpt
  pretrained_model_state_hook:
    _name_: load_backbone
    freeze_backbone: false  # seems to work much better if false (ie finetune entire model)
